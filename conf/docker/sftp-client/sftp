#
# Copyright 2020 the original author jacky.eastmoon
#
# All commad module need 3 method :
# [command]        : Command script
# [command]-args   : Command script options setting function
# [command]-help   : Command description
# Basically, CLI will not use "--options" to execute function, "--help, -h" is an exception.
# But, if need exception, it will need to thinking is common or individual, and need to change BREADCRUMB variable in [command]-args function.
#
# Ref : https://www.cyberciti.biz/faq/category/bash-shell/
# Ref : https://tldp.org/LDP/abs/html/string-manipulation.html
# Ref : https://blog.longwin.com.tw/2017/04/bash-shell-script-get-self-file-name-2017/

# ------------------- shell setting -------------------

#!/bin/bash
set -e

# ------------------- declare CLI file variable -------------------

CLI_DIRECTORY=${PWD}
CLI_FILE=${BASH_SOURCE}
CLI_FILENAME=${BASH_SOURCE%.*}
CLI_FILEEXTENSION=${BASH_SOURCE##*.}

# ------------------- declare CLI variable -------------------

BREADCRUMB="cli"
COMMAND=""
COMMAND_BC_AGRS=()
COMMAND_AC_AGRS=()

# ------------------- declare variable -------------------

PROJECT_NAME=${PWD##*/}
PROJECT_ENV="dev"

# ------------------- declare function -------------------

# Command Parser
function main() {
    argv-parser ${@}
    for arg in ${COMMAND_BC_AGRS[@]}
    do
        IFS='=' read -ra ADDR <<< "${arg}"
        key=${ADDR[0]}
        value=${ADDR[1]}
        eval ${BREADCRUMB}-args ${key} ${value}
        common-args ${key} ${value}
    done
    # Execute command
    BREADCRUMB=${BREADCRUMB}-${COMMAND}
    if [ "$(type -t ${BREADCRUMB})" == "function" ];
    then
        eval ${BREADCRUMB}
    else
        cli-help
    fi
}

function common-args() {
    key=${1}
    value=${2}
    case ${key} in
        "--help")
            BREADCRUMB="${BREADCRUMB}-help"
            ;;
        "-h")
            BREADCRUMB="${BREADCRUMB}-help"
            ;;
    esac
}

function argv-parser() {
    COMMAND=""
    COMMAND_BC_AGRS=()
    COMMAND_AC_AGRS=()
    is_find_cmd=0
    for arg in ${@}
    do
        if [ ${is_find_cmd} -eq 0 ]
        then
            if [[ ${arg} =~ -+[a-zA-Z1-9]* ]]
            then
                COMMAND_BC_AGRS+=(${arg})
            else
                COMMAND=${arg}
                is_find_cmd=1
            fi
        else
            COMMAND_AC_AGRS+=(${arg})
        fi
    done
}


# ------------------- Main method -------------------

function cli() {
    cli-help
}

function cli-args() {
    key=${1}
    value=${2}
}

function cli-help() {
    echo "This is a docker control script with project ${PROJECT_NAME}"
    echo "If not input any command, at default will show HELP"
    echo "Options:"
    echo "    --help, -h        Show more information with CLI."
    echo ""
    echo "Command:"
    echo "    d                 Download file from SFTP server."
    echo "    u                 Upload file to SFTP server."
    echo "    ls                List SFTP server directory."
    echo "    rm                Delete remote file in SFTP server."
    echo ""
    echo "Run 'cli [COMMAND] --help' for more information on a command."
}

# ------------------- Common Command method -------------------

# ------------------- Command "d" method -------------------

function cli-d {
    echo "> Download file from SFTP server."
    SOURCE_DIR=${COMMAND_AC_AGRS[0]}
    DEST_DIR=${COMMAND_AC_AGRS[1]}
    [ ! -z ${SFTP_DOWNLOAD_DIR} ] && DEST_DIR=${SFTP_DOWNLOAD_DIR}${DEST_DIR}
    echo "> Download ${SOURCE_DIR} to ${DEST_DIR}"
    sshpass -p ${SFTP_PASSWORD} sftp -oStrictHostKeyChecking=no ${SFTP_SERVER} << EOF
get -r ${SOURCE_DIR} ${DEST_DIR}
EOF
}

function cli-d-args {
    key=${1}
    value=${2}
}

function cli-d-help {
    echo "This is a Command Line Interface with project ${PROJECT_NAME}"
    echo "Download file from SFTP server."
    echo ""
    echo "Options:"
    echo "    --help, -h        Show more information with UP Command."
}

# ------------------- Command "u" method -------------------

function cli-u {
    echo "> Upload file to SFTP server."
    SOURCE_DIR=${COMMAND_AC_AGRS[0]}
    [ ! -z ${SFTP_UPLOAD_DIR} ] && SOURCE_DIR=${SFTP_UPLOAD_DIR}${SOURCE_DIR}
    DEST_DIR=${COMMAND_AC_AGRS[1]}
    echo "> Upload ${SOURCE_DIR} to ${DEST_DIR}"
    sshpass -p ${SFTP_PASSWORD} sftp -oStrictHostKeyChecking=no ${SFTP_SERVER} << EOF
put ${SOURCE_DIR} ${DEST_DIR}
EOF
}

function cli-u-args {
    key=${1}
    value=${2}
}

function cli-u-help {
    echo "This is a Command Line Interface with project ${PROJECT_NAME}"
    echo "Upload file to SFTP server."
    echo ""
    echo "Options:"
    echo "    --help, -h        Show more information with UP Command."
}

# ------------------- Command "ls" method -------------------

function cli-ls {
    echo "> List SFTP server directory."
    REMOTE_DIR=${COMMAND_AC_AGRS[0]}
    if [ -z ${REMOTE_DIR} ];
    then
        echo ls -al | sshpass -p ${SFTP_PASSWORD} sftp -oStrictHostKeyChecking=no ${SFTP_SERVER}
    else
        echo ls ${REMOTE_DIR} -al | sshpass -p ${SFTP_PASSWORD} sftp -oStrictHostKeyChecking=no ${SFTP_SERVER}
    fi
}

function cli-ls-args {
    key=${1}
    value=${2}
}

function cli-ls-help {
    echo "This is a Command Line Interface with project ${PROJECT_NAME}"
    echo "List SFTP server directory."
    echo ""
    echo "Options:"
    echo "    --help, -h        Show more information with UP Command."
}

# ------------------- Command "rm" method -------------------

function cli-rm {
    echo "> Delete remote file in SFTP server."
    REMOTE_DIR=${COMMAND_AC_AGRS[0]}
    if [ ! -z ${REMOTE_DIR} ];
    then
        echo "rm ${REMOTE_DIR}" | sshpass -p ${SFTP_PASSWORD} sftp  -oStrictHostKeyChecking=no ${SFTP_SERVER}
    fi
}

function cli-rm-args {
    key=${1}
    value=${2}
}

function cli-rm-help {
    echo "This is a Command Line Interface with project ${PROJECT_NAME}"
    echo "Delete remote file in SFTP server."
    echo ""
    echo "Options:"
    echo "    --help, -h        Show more information with UP Command."
}

# ------------------- execute script -------------------

main ${@}
